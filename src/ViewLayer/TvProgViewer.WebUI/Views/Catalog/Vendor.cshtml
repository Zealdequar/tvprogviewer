@model VendorModel

@using TvProgViewer.Core
@using TvProgViewer.Core.Domain.Seo
@using TvProgViewer.Core.Domain.Vendors

@inject IWebHelper webHelper
@inject SeoSettings seoSettings

@{
    Layout = "_ColumnsTwo";

    //title
    TvProgHtml.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    TvProgHtml.AddMetaDescriptionParts(Model.MetaDescription);
    TvProgHtml.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    TvProgHtml.AppendPageCssClassParts("html-vendor-page");

    if (seoSettings.CanonicalUrlsEnabled)
    {
        var vendorUrl = Url.RouteUrl<Vendor>(new { SeName = Model.SeName }, webHelper.GetCurrentRequestProtocol()).ToLowerInvariant();
        TvProgHtml.AddCanonicalUrlParts(vendorUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }
}

@section CatalogFilters {
    @await Html.PartialAsync("_CatalogFilters", Model.CatalogTvChannelsModel)
}

<div class="page vendor-page">
    <div class="page-title">
        <h1>@Model.Name</h1>
    </div>
    <div class="page-body">
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.VendorDetailsTop, additionalData = Model })
        @*description*@
        @if (!string.IsNullOrWhiteSpace(Model.Description))
        {
            <div class="vendor-description">
                @Html.Raw(Model.Description)
            </div>
        }
        @*contact vendor*@
        @if (Model.AllowUsersToContactVendors)
        {
            <div class="contact-vendor">
                <button type="button" class="button-2 contact-vendor-button" onclick="setLocation('@Url.RouteUrl("ContactVendor", new { vendorId = Model.Id })')">@T("ContactVendor")</button>
            </div>
        }
        @await Html.PartialAsync("_CatalogSelectors", Model.CatalogTvChannelsModel)
        @{
            var catalogTvChannelsViewData = new ViewDataDictionary(ViewData);
            catalogTvChannelsViewData["fetchUrl"] = Html.Raw(Url.Action("GetVendorTvChannels", "Catalog", new { vendorId = Model.Id }));
        }
        @await Html.PartialAsync("_CatalogTvChannels", Model.CatalogTvChannelsModel, catalogTvChannelsViewData)
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.VendorDetailsBottom, additionalData = Model })
    </div>
</div>
