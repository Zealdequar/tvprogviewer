@model HeaderLinksModel
@using TvProgViewer.Core.Domain.Topics
@using TvProgViewer.Core.Domain.Users
@inject TvProgViewer.Core.IWebHelper webHelper

<div class="collapse navbar-collapse" id="navbarNav">
    <ul class="navbar-nav ml-auto">
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HeaderLinksBefore, additionalData = Model })
        @if (Model.DisplayHomepageMenuItem)
        {
            <li class="nav-item"><a class="nav-link ico-homepage" href="@Url.RouteUrl("Homepage")">@T("Homepage")</a></li>
        }
        @foreach (var topic in Model.Topics)
        {
            <li class="nav-item"><a class="nav-link ico-topic-@topic.Id" href="@(Url.RouteUrl<Topic>(new { SeName = topic.SeName }))">@topic.Name</a></li>
        }
        @if (Model.DisplayTvChannelSearchMenuItem)
        {
            <li class="nav-item"><a class="nav-link ico-search" href="@Url.RouteUrl("TvSearch")">@T("Search")</a></li>
        }
        @if (Model.IsAuthenticated)
        {
            <li class="nav-item"><a class="nav-link ico-account" href="@Url.RouteUrl("UserInfo")" >@T("Account.MyAccount")@*@Model.UserName*@</a></li>
            <li class="nav-item"><a class="nav-link ico-logout" href="@Url.RouteUrl("Logout")">@T("Account.Logout")</a></li>
        }
        else
        {
            var returnUrl = Context.Request.Query.TryGetValue("returnUrl", out var url) && !StringValues.IsNullOrEmpty(url)
                ? url.ToString()
                : webHelper.GetRawUrl(Context.Request);

            @if (Model.RegistrationType != UserRegistrationType.Disabled)
            {
                <li class="nav-item"><a class="nav-link ico-register" href="@Url.RouteUrl("Register", new { returnUrl })">@T("Account.Register")</a></li>
            }
            <li class="nav-item"><a class="nav-link ico-login" href="@Url.RouteUrl("Login", new { returnUrl })">@T("Account.Login")</a></li>
        }
        @if (Model.AllowPrivateMessages)
        {
            <li class="nav-item">
                <a class="nav-link ico-inbox" href="@Url.RouteUrl("PrivateMessages", new { tab = "" })">
                    <span class="inbox-label">@T("PrivateMessages.Inbox")</span>
                    <span class="inbox-unread">@Model.UnreadPrivateMessages</span>
                </a>
            </li>
        }
        @if (Model.WishlistEnabled)
        {
            <li class="nav-item">
                <a class="nav-link ico-wishlist" href="@Url.RouteUrl("Wishlist")">
                    <span class="wishlist-label">@T("Wishlist")</span>
                    <span class="wishlist-qty">@T("Wishlist.HeaderQuantity", Model.WishlistItems)</span>
                </a>
            </li>
        }
        @if (Model.DisplayContactUsMenuItem)
        {
            <li class="nav-item"><a class="nav-link ico-contactus" href="@Url.RouteUrl("ContactUs")">@T("ContactUs")</a></li>
        }
        @if (Model.ShoppingCartEnabled)
        {
            <li id="topcartlink" class="nav-item">
                <a class="nav-link ico-cart" href="@Url.RouteUrl("ShoppingCart")">
                    <span class="cart-label">@T("ShoppingCart")</span>
                    <span class="cart-qty">@T("ShoppingCart.HeaderQuantity", Model.ShoppingCartItems)</span>
                </a>
            </li>
        }
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HeaderLinksAfter, additionalData = Model })
    </ul>
    @if (Model.AllowPrivateMessages && !string.IsNullOrEmpty(Model.AlertMessage))
    {
        //new private message notification
        <script asp-location="Footer">
            $(document).ready(function () {
                displayPopupNotification('@Html.Raw(JavaScriptEncoder.Default.Encode(Model.AlertMessage))', 'success', false);
            });
        </script>
    }
    @if (Model.ShoppingCartEnabled)
    {
        <script asp-location="Footer">
            $(document).ready(function () {
                $('.header').on('mouseenter', '#topcartlink', function () {
                    $('#flyout-cart').addClass('active');
                });
                $('.header').on('mouseleave', '#topcartlink', function () {
                    $('#flyout-cart').removeClass('active');
                });
                $('.header').on('mouseenter', '#flyout-cart', function () {
                    $('#flyout-cart').addClass('active');
                });
                $('.header').on('mouseleave', '#flyout-cart', function () {
                    $('#flyout-cart').removeClass('active');
                });
            });
        </script>
    }
</div>
